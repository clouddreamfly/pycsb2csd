# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffers

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CSParseBinary(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CSParseBinary()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCSParseBinary(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CSParseBinary
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CSParseBinary
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CSParseBinary
    def Textures(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CSParseBinary
    def TexturesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CSParseBinary
    def TexturesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # CSParseBinary
    def TexturePngs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CSParseBinary
    def TexturePngsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CSParseBinary
    def TexturePngsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # CSParseBinary
    def NodeTree(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from flatbuffers.NodeTree import NodeTree
            obj = NodeTree()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CSParseBinary
    def Action(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from flatbuffers.NodeAction import NodeAction
            obj = NodeAction()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CSParseBinary
    def AnimationList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from flatbuffers.AnimationInfo import AnimationInfo
            obj = AnimationInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CSParseBinary
    def AnimationListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CSParseBinary
    def AnimationListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def Start(builder): builder.StartObject(6)
def CSParseBinaryStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddVersion(builder, version): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)
def CSParseBinaryAddVersion(builder, version):
    """This method is deprecated. Please switch to AddVersion."""
    return AddVersion(builder, version)
def AddTextures(builder, textures): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(textures), 0)
def CSParseBinaryAddTextures(builder, textures):
    """This method is deprecated. Please switch to AddTextures."""
    return AddTextures(builder, textures)
def StartTexturesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CSParseBinaryStartTexturesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartTexturesVector(builder, numElems)
def AddTexturePngs(builder, texturePngs): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(texturePngs), 0)
def CSParseBinaryAddTexturePngs(builder, texturePngs):
    """This method is deprecated. Please switch to AddTexturePngs."""
    return AddTexturePngs(builder, texturePngs)
def StartTexturePngsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CSParseBinaryStartTexturePngsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartTexturePngsVector(builder, numElems)
def AddNodeTree(builder, nodeTree): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(nodeTree), 0)
def CSParseBinaryAddNodeTree(builder, nodeTree):
    """This method is deprecated. Please switch to AddNodeTree."""
    return AddNodeTree(builder, nodeTree)
def AddAction(builder, action): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(action), 0)
def CSParseBinaryAddAction(builder, action):
    """This method is deprecated. Please switch to AddAction."""
    return AddAction(builder, action)
def AddAnimationList(builder, animationList): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(animationList), 0)
def CSParseBinaryAddAnimationList(builder, animationList):
    """This method is deprecated. Please switch to AddAnimationList."""
    return AddAnimationList(builder, animationList)
def StartAnimationListVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CSParseBinaryStartAnimationListVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartAnimationListVector(builder, numElems)
def End(builder): return builder.EndObject()
def CSParseBinaryEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
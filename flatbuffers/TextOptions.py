# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffers

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TextOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TextOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTextOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TextOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TextOptions
    def WidgetOptions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from flatbuffers.WidgetOptions import WidgetOptions
            obj = WidgetOptions()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TextOptions
    def FontResource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from flatbuffers.ResourceData import ResourceData
            obj = ResourceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TextOptions
    def FontName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TextOptions
    def FontSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TextOptions
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TextOptions
    def IsLocalized(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # TextOptions
    def AreaWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TextOptions
    def AreaHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TextOptions
    def HAlignment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TextOptions
    def VAlignment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TextOptions
    def TouchScaleEnable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # TextOptions
    def IsCustomSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # TextOptions
    def OutlineEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # TextOptions
    def OutlineColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = o + self._tab.Pos
            from flatbuffers.Color import Color
            obj = Color()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TextOptions
    def OutlineSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 1

    # TextOptions
    def ShadowEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # TextOptions
    def ShadowColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = o + self._tab.Pos
            from flatbuffers.Color import Color
            obj = Color()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TextOptions
    def ShadowOffsetX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 2.0

    # TextOptions
    def ShadowOffsetY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return -2.0

    # TextOptions
    def ShadowBlurRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(20)
def TextOptionsStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddWidgetOptions(builder, widgetOptions): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(widgetOptions), 0)
def TextOptionsAddWidgetOptions(builder, widgetOptions):
    """This method is deprecated. Please switch to AddWidgetOptions."""
    return AddWidgetOptions(builder, widgetOptions)
def AddFontResource(builder, fontResource): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(fontResource), 0)
def TextOptionsAddFontResource(builder, fontResource):
    """This method is deprecated. Please switch to AddFontResource."""
    return AddFontResource(builder, fontResource)
def AddFontName(builder, fontName): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(fontName), 0)
def TextOptionsAddFontName(builder, fontName):
    """This method is deprecated. Please switch to AddFontName."""
    return AddFontName(builder, fontName)
def AddFontSize(builder, fontSize): builder.PrependInt32Slot(3, fontSize, 0)
def TextOptionsAddFontSize(builder, fontSize):
    """This method is deprecated. Please switch to AddFontSize."""
    return AddFontSize(builder, fontSize)
def AddText(builder, text): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)
def TextOptionsAddText(builder, text):
    """This method is deprecated. Please switch to AddText."""
    return AddText(builder, text)
def AddIsLocalized(builder, isLocalized): builder.PrependBoolSlot(5, isLocalized, 0)
def TextOptionsAddIsLocalized(builder, isLocalized):
    """This method is deprecated. Please switch to AddIsLocalized."""
    return AddIsLocalized(builder, isLocalized)
def AddAreaWidth(builder, areaWidth): builder.PrependInt32Slot(6, areaWidth, 0)
def TextOptionsAddAreaWidth(builder, areaWidth):
    """This method is deprecated. Please switch to AddAreaWidth."""
    return AddAreaWidth(builder, areaWidth)
def AddAreaHeight(builder, areaHeight): builder.PrependInt32Slot(7, areaHeight, 0)
def TextOptionsAddAreaHeight(builder, areaHeight):
    """This method is deprecated. Please switch to AddAreaHeight."""
    return AddAreaHeight(builder, areaHeight)
def AddHAlignment(builder, hAlignment): builder.PrependInt32Slot(8, hAlignment, 0)
def TextOptionsAddHAlignment(builder, hAlignment):
    """This method is deprecated. Please switch to AddHAlignment."""
    return AddHAlignment(builder, hAlignment)
def AddVAlignment(builder, vAlignment): builder.PrependInt32Slot(9, vAlignment, 0)
def TextOptionsAddVAlignment(builder, vAlignment):
    """This method is deprecated. Please switch to AddVAlignment."""
    return AddVAlignment(builder, vAlignment)
def AddTouchScaleEnable(builder, touchScaleEnable): builder.PrependBoolSlot(10, touchScaleEnable, 0)
def TextOptionsAddTouchScaleEnable(builder, touchScaleEnable):
    """This method is deprecated. Please switch to AddTouchScaleEnable."""
    return AddTouchScaleEnable(builder, touchScaleEnable)
def AddIsCustomSize(builder, isCustomSize): builder.PrependBoolSlot(11, isCustomSize, 0)
def TextOptionsAddIsCustomSize(builder, isCustomSize):
    """This method is deprecated. Please switch to AddIsCustomSize."""
    return AddIsCustomSize(builder, isCustomSize)
def AddOutlineEnabled(builder, outlineEnabled): builder.PrependBoolSlot(12, outlineEnabled, 0)
def TextOptionsAddOutlineEnabled(builder, outlineEnabled):
    """This method is deprecated. Please switch to AddOutlineEnabled."""
    return AddOutlineEnabled(builder, outlineEnabled)
def AddOutlineColor(builder, outlineColor): builder.PrependStructSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(outlineColor), 0)
def TextOptionsAddOutlineColor(builder, outlineColor):
    """This method is deprecated. Please switch to AddOutlineColor."""
    return AddOutlineColor(builder, outlineColor)
def AddOutlineSize(builder, outlineSize): builder.PrependInt32Slot(14, outlineSize, 1)
def TextOptionsAddOutlineSize(builder, outlineSize):
    """This method is deprecated. Please switch to AddOutlineSize."""
    return AddOutlineSize(builder, outlineSize)
def AddShadowEnabled(builder, shadowEnabled): builder.PrependBoolSlot(15, shadowEnabled, 0)
def TextOptionsAddShadowEnabled(builder, shadowEnabled):
    """This method is deprecated. Please switch to AddShadowEnabled."""
    return AddShadowEnabled(builder, shadowEnabled)
def AddShadowColor(builder, shadowColor): builder.PrependStructSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(shadowColor), 0)
def TextOptionsAddShadowColor(builder, shadowColor):
    """This method is deprecated. Please switch to AddShadowColor."""
    return AddShadowColor(builder, shadowColor)
def AddShadowOffsetX(builder, shadowOffsetX): builder.PrependFloat32Slot(17, shadowOffsetX, 2.0)
def TextOptionsAddShadowOffsetX(builder, shadowOffsetX):
    """This method is deprecated. Please switch to AddShadowOffsetX."""
    return AddShadowOffsetX(builder, shadowOffsetX)
def AddShadowOffsetY(builder, shadowOffsetY): builder.PrependFloat32Slot(18, shadowOffsetY, -2.0)
def TextOptionsAddShadowOffsetY(builder, shadowOffsetY):
    """This method is deprecated. Please switch to AddShadowOffsetY."""
    return AddShadowOffsetY(builder, shadowOffsetY)
def AddShadowBlurRadius(builder, shadowBlurRadius): builder.PrependInt32Slot(19, shadowBlurRadius, 0)
def TextOptionsAddShadowBlurRadius(builder, shadowBlurRadius):
    """This method is deprecated. Please switch to AddShadowBlurRadius."""
    return AddShadowBlurRadius(builder, shadowBlurRadius)
def End(builder): return builder.EndObject()
def TextOptionsEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
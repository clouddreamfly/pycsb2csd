# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffers

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Light3DOption(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Light3DOption()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLight3DOption(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Light3DOption
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Light3DOption
    def Node3DOption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from flatbuffers.Node3DOption import Node3DOption
            obj = Node3DOption()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Light3DOption
    def Enabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Light3DOption
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Light3DOption
    def Flag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Light3DOption
    def Intensity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Light3DOption
    def Range(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Light3DOption
    def OuterAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Start(builder): builder.StartObject(7)
def Light3DOptionStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddNode3DOption(builder, node3DOption): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(node3DOption), 0)
def Light3DOptionAddNode3DOption(builder, node3DOption):
    """This method is deprecated. Please switch to AddNode3DOption."""
    return AddNode3DOption(builder, node3DOption)
def AddEnabled(builder, enabled): builder.PrependBoolSlot(1, enabled, 0)
def Light3DOptionAddEnabled(builder, enabled):
    """This method is deprecated. Please switch to AddEnabled."""
    return AddEnabled(builder, enabled)
def AddType(builder, type): builder.PrependInt32Slot(2, type, 0)
def Light3DOptionAddType(builder, type):
    """This method is deprecated. Please switch to AddType."""
    return AddType(builder, type)
def AddFlag(builder, flag): builder.PrependInt32Slot(3, flag, 0)
def Light3DOptionAddFlag(builder, flag):
    """This method is deprecated. Please switch to AddFlag."""
    return AddFlag(builder, flag)
def AddIntensity(builder, intensity): builder.PrependFloat32Slot(4, intensity, 0.0)
def Light3DOptionAddIntensity(builder, intensity):
    """This method is deprecated. Please switch to AddIntensity."""
    return AddIntensity(builder, intensity)
def AddRange(builder, range): builder.PrependFloat32Slot(5, range, 0.0)
def Light3DOptionAddRange(builder, range):
    """This method is deprecated. Please switch to AddRange."""
    return AddRange(builder, range)
def AddOuterAngle(builder, outerAngle): builder.PrependFloat32Slot(6, outerAngle, 0.0)
def Light3DOptionAddOuterAngle(builder, outerAngle):
    """This method is deprecated. Please switch to AddOuterAngle."""
    return AddOuterAngle(builder, outerAngle)
def End(builder): return builder.EndObject()
def Light3DOptionEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffers

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Node3DOption(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Node3DOption()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNode3DOption(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Node3DOption
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Node3DOption
    def NodeOptions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from flatbuffers.WidgetOptions import WidgetOptions
            obj = WidgetOptions()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Node3DOption
    def Position3D(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from flatbuffers.Vector3 import Vector3
            obj = Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Node3DOption
    def Rotation3D(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from flatbuffers.Vector3 import Vector3
            obj = Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Node3DOption
    def Scale3D(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from flatbuffers.Vector3 import Vector3
            obj = Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Node3DOption
    def Cameramask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(5)
def Node3DOptionStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddNodeOptions(builder, nodeOptions): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeOptions), 0)
def Node3DOptionAddNodeOptions(builder, nodeOptions):
    """This method is deprecated. Please switch to AddNodeOptions."""
    return AddNodeOptions(builder, nodeOptions)
def AddPosition3D(builder, position3D): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(position3D), 0)
def Node3DOptionAddPosition3D(builder, position3D):
    """This method is deprecated. Please switch to AddPosition3D."""
    return AddPosition3D(builder, position3D)
def AddRotation3D(builder, rotation3D): builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rotation3D), 0)
def Node3DOptionAddRotation3D(builder, rotation3D):
    """This method is deprecated. Please switch to AddRotation3D."""
    return AddRotation3D(builder, rotation3D)
def AddScale3D(builder, scale3D): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(scale3D), 0)
def Node3DOptionAddScale3D(builder, scale3D):
    """This method is deprecated. Please switch to AddScale3D."""
    return AddScale3D(builder, scale3D)
def AddCameramask(builder, cameramask): builder.PrependInt32Slot(4, cameramask, 0)
def Node3DOptionAddCameramask(builder, cameramask):
    """This method is deprecated. Please switch to AddCameramask."""
    return AddCameramask(builder, cameramask)
def End(builder): return builder.EndObject()
def Node3DOptionEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)